>>> import keyword
>>> keyword.kwlist
['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 
'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 
'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']

id(a)
139737403793936

id у пайтона состоит из 15 чисел
при каждом запуске пайтон генерирует id объектов с новой последовательностью

при создании переменной, вначале создается объект,
который имеет уникальный идентификатор, тип и значение, после этого переменная
может ссылаться на созданный объект

в переменной хранятся ссылки на объекты
содержащие значения, а не непосредственно сами эти значения.

###time complexety -- временная сложность###
0(n)
0(1)
0(k)
0()

?### захардкодить

### FUNCTION ###
-- функции тоже объект
-- замыкание -- возможность функции использовать чужие переменные
-- может принимать:
			позиционные аргументы -- x, y, z
			нулевое кол-во аргументов
			аргументы с параметром пр умолчанию
			любое количество аргументов (*agrs) -- tuple
			любое количество аргументов (**agrs) -- dict

#РЕКУРСИЯ -- способ функции вызвать саму себя -- в пайтоне практически не используется
и ограничивается 995-996 рекурсиями, разработчик пайтона не хотел применять рекурсии и 
в сосновном все решается с помощью циклов. ошибка - рекурсивная глубина

факториал - часто спрашивают на собеседованиях
это произведение натуральных чисел

def factorial(n):
    if n == 0:
        return 1
    return n * factorial(n-1)
print(factorial(4)) # OUT: 24 [4*3*2*1]

###РАБОТА С КОНСОЛЬЮ###
ниже перечисленные команды относительно строки являются командами выполняющими запуск
предопределенных программ с идентичным названием,
в PATH хранится список путей, где система ищет исполняемые файлы
PATH можно редактировать
ls [list files]
cd [dir]
rm [file]
rm -r [dir]
touch [file]
mkdir [dir]
cat [file]
pwd [see directory, shell command]
clear [clear console]
nano [text redactor]
apt []
install []
upgrade
update
echo 'xxx' > xxx.txt # где > - перенаправление вывода, echo - как в print в пайтоне, выводит по умолчанию в консоль, ну а здесь вывод был перенаправлен в файл
echo 'xxx' >> xxx.txt
vim [redactor]
emax [operating system]
####################### 
